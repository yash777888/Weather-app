import sys
import requests
from PyQt5.QtWidgets import QApplication, QLabel, QLineEdit, QPushButton, QVBoxLayout, QWidget
from PyQt5.QtCore import Qt

class WeatherApp(QWidget):
    def __init__(self):
        super().__init__()
        self.city_label = QLabel('Enter the name of a city',self)
        self.city_input = QLineEdit(self)
        self.get_weather_button = QPushButton('Get Weather',self)
        self.temp_label = QLabel(self)
        self.emoji_label = QLabel(self)
        self.description_label = QLabel(self)
        self.initui()

    def initui(self):
        self.setWindowTitle('Weather App')
        self.setGeometry(450,300,600,550)

        vbox = QVBoxLayout()
        vbox.addWidget(self.temp_label)
        vbox.addWidget(self.emoji_label)
        vbox.addWidget(self.description_label)
        vbox.addWidget(self.city_label)
        vbox.addWidget(self.city_input)
        vbox.addWidget(self.get_weather_button)

        self.setLayout(vbox)

        self.city_label.setAlignment(Qt.AlignCenter)
        self.city_input.setAlignment(Qt.AlignCenter)
        self.emoji_label.setAlignment(Qt.AlignCenter)
        self.description_label.setAlignment(Qt.AlignCenter)
        self.temp_label.setAlignment(Qt.AlignCenter)

        self.city_input.setObjectName('city_input')
        self.city_label.setObjectName('city_label')
        self.temp_label.setObjectName('temp_label')
        self.get_weather_button.setObjectName('get_weather_button')
        self.emoji_label.setObjectName('emoji_label')
        self.description_label.setObjectName('description_label')

        self.setStyleSheet('''
            QLabel,QPushButton{
               font-family : calibri;
            }
            QLabel#city_label{
               font-size : 25px;
               font-family : italic;
            }
            QLineEdit#city_input{
                font-size : 50px;
            }
            QPushButton#get_weather_button{
                font-size : 30px;
                font-weight : bold;
            }
            QLabel#temp_label{
                font-size : 75px;
            }
            QLabel#emoji_label{
                font-size : 100px;
                font-family : segoe ui emoji;
            }
            QLabel#description_label{
                font-size : 60px;
            }''')

        self.get_weather_button.clicked.connect(self.get_weather)

    def get_weather(self):
        api_key = 'ca48255dd6ab292743dae561e37ed8a8'
        city = self.city_input.text()
        url = f'https://api.openweathermap.org/data/2.5/weather?q={city}&appid={api_key}'

        try:
            response = requests.get(url)
            response.raise_for_status()
            data = response.json()

            if data['cod'] == 200:
                self.display_weather(data)

        except requests.exceptions.HTTPError as http_error:
            match response.status_code:
                case 400:
                    self.display_error('Bad request:\nplease check your input')
                case 401:
                    self.display_error('Unauthorized:\nInvalid API')
                case 403:
                    self.display_error('Forbidden:\nAccess denied')
                case 404:
                    self.display_error('Not found:\nCity not found')
                case 500:
                    self.display_error('Internal server error:\nPlease try again later')
                case 502:
                    self.display_error('Bad gateway:\nInvalid response from the server')
                case 503:
                    self.display_error('Service unavailable:\nSever down')
                case 504:
                    self.display_error('Gateway timeout:\nNo response from the server')
                case _:
                    self.display_error(f'HTTP error occured:\n{http_error}')

        except requests.exceptions.TooManyRedirects:
            self.display_error('Too may redirects:\n Check your connection')

        except requests.exceptions.ConnectionError:
            self.display_error('Connection Error:\nCheck your internet connection')

        except requests.exceptions.Timeout:
            self.display_error('Timeout Error:\nRequest timed out')

        except requests.exceptions.RequestException as req_error:
            self.display_error(f'Request error\n{req_error}')


    def display_error(self,message):
        self.temp_label.setStyleSheet('font-size : 30px')
        self.temp_label.setText(message)
        self.emoji_label.clear()
        self.description_label.clear()

    def display_weather(self,data):
        self.temp_label.setStyleSheet('font-size : 75px')
        temperature_k = data['main']['temp']
        temperature_c = temperature_k -273.15

        weather_id = data['weather'][0]['id']

        weather_description = data['weather'][0]['description']

        self.temp_label.setText(f'{temperature_c:.0f}°C')
        self.emoji_label.setText(self.display_emoji(weather_id))
        self.description_label.setText(weather_description)

    @staticmethod
    def display_emoji(weather_id):
        if 200 <= weather_id <= 232:
            return '⛈️'

        elif 300 <= weather_id <= 321:
            return '⛅'

        elif 500 <= weather_id <= 531:
            return '🌧️'

        elif 600 <= weather_id <= 622:
            return '❄️'

        elif 700 <= weather_id <= 741:
            return '🌫️'

        elif weather_id == 762:
            return '🌋'

        elif weather_id == 771:
            return '💨'

        elif weather_id == 781:
            return '🌪️'

        elif weather_id == 800:
            return '☀️'

        elif 800 <= weather_id <= 804:
            return '☁️'

        else:
            return ''

def main():
    app = QApplication(sys.argv)
    weather_app = WeatherApp()
    weather_app.show()
    sys.exit(app.exec_())

if __name__ == '__main__':
    main()
